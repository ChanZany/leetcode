package com.company.DP;

/**
 你可以尽可能地完成更多的交易, 卖出股票后，你⽆法在第⼆天买⼊股票 (即冷冻期为 1 天)。
 【无冷冻期;】
 dp[i][j]表示第i天的股票状态为j
    第i天持有股票:dp[i][0]=max(dp[i-1][0],dp[i-1][1]-prices[i])
    第i天不持有股票：dp[i][1] = max(dp[i-1][1],dp[i-1][0]+price[i])

 【有冷冻期:】
 具体可以区分出如下四个状态：
 状态⼀：买⼊股票状态（今天买⼊股票，或者是之前就买⼊了股票然后没有操作）
 卖出股票状态，这⾥就有两种卖出股票状态
    状态⼆：两天前就卖出了股票，度过了冷冻期，⼀直没操作，今天保持卖出股票状态
    状态三：今天卖出了股票
 状态四：今天为冷冻期状态，但冷冻期状态不可持续，只有⼀天！
 j的状态为：
     0：状态一  买⼊
     1：状态⼆  卖出(前两天卖出度过冷冻期)
     2：状态三  卖出（今日卖出）
     3：状态四  冷冻期
 有冷冻期的状态转移：
 当前为买入：
 dp[i][0]=max(dp[i - 1][0], max(dp[i - 1][3], dp[i - 1][1]) - prices[i]);
    - dp[i - 1][0]:昨日就是持有股票状态（状态⼀）
    - dp[i - 1][3]- prices[i]:昨日是冷冻期（状态四）,今日买入
    - dp[i - 1][1]-prices[i]:昨日是保持卖出股票状态（状态⼆），今日买入
 当前为卖出（保持）：
 dp[i][1] = max(dp[i - 1][1], dp[i - 1][3]);
    - dp[i - 1][1]：昨日就是卖出（状态⼆）
    - dp[i - 1][3]：昨日是冷冻期（状态四）
 当前为卖出（今日）：
 dp[i][2] = dp[i - 1][0] + prices[i];
    - 昨日是买入，今日卖出
 当前为冷冻：
 dp[i][3] = dp[i - 1][2];
    - 昨天卖出了股票（状态三）
 综上分析，递推代码如下：
 dp[i][0] = max(dp[i - 1][0], max(dp[i - 1][3], dp[i - 1][1]) - prices[i];
 dp[i][1] = max(dp[i - 1][1], dp[i - 1][3]);
 dp[i][2] = dp[i - 1][0] + prices[i];
 dp[i][3] = dp[i - 1][2];
 初始化
 如果是持有股票状态（状态⼀）那么：dp[0][0] = -prices[0]，买⼊股票所省现⾦为负数。
 保持卖出股票状态（状态⼆），第0天没有卖出dp[0][1]初始化为0就⾏，
 今天卖出了股票（状态三），同样dp[0][2]初始化为0，因为最少收益就是0，绝不会是负数。
 同理dp[0][3]也初始为0。
 */
public class StockTime5 {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        if (n==0) return 0;
        int[][] dp = new int[n][4];
        dp[0][0] =-prices[0];
        for (int i = 1; i < n; i++) {
            dp[i][0] = Math.max(dp[i-1][0],Math.max(dp[i-1][3],dp[i-1][1])-prices[i]);
            dp[i][1] = Math.max(dp[i-1][1],dp[i-1][3]);
            dp[i][2] = dp[i-1][0]+prices[i];
            dp[i][3] = dp[i-1][2];
        }
        return Math.max(dp[n-1][3],Math.max(dp[n-1][1],dp[n-1][2]));
    }
}
